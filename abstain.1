.Dd $Mdocdate$
.Dt ABSTAIN 1
.Os
.Sh NAME
.Nm abstain
.Nd selectively disallow
.Xr pledge 2
promises for program execution
.Sh SYNOPSIS
.Nm abstain
.Op Fl le
.Op Fl v Ar vice Ns Op Ar ,vice,...
.Ar binary Op Ar arguments Ar ...
.Sh DESCRIPTION
The
.Nm
utility executes
.Ar binary
with
.Ar arguments
using
.Xr pledge 2
.Em execpromises .
By default, it will do so with all
.Em execpromises
allowed.
.Pp
Specify
.Ar vices
with
.Fl v
in a comma-separated list.
They represent the exact same concept as
.Em promises
in
.Xr pledge 2 ,
except that their effect is the reverse - they
prohibit
access to syscalls by removing the corresponding
.Xr pledge 2
.Em promise
from the
.Em execpromises .
.Pp
The
.Fl e
flag adds the
.Sq error
.Em promise
.Pq which is not included by default
so that a violation will lead to
.Dv ENOSYS
instead of
.Dv SIGABRT .
.Pp
The
.Fl l
flag prints all possible
.Ar vices
to the standard output.
.Pp
The main use case that
.Nm
is designed for is to gather empirical behavioral data on software for specific types of syscalls, building on
.Xr pledge 2
.Em promise
sets. Ideally, this is part of a comprehensive investigation that includes source code review and a study of kernel trace logs
.Po
see
.Xr ktrace 1
.Pc .
.Sh EXAMPLES
Prohibit file system modification:
.Bd -literal -offset indent
$ abstain -v wpath,cpath,dpath,fattr,chown binary arguments
.Ed
.Pp
If you run with
.Ar kern.audio.record
and/or
.Ar kern.video.record
enabled
.Po
see
.Xr sysctl 8 ,
not recommended as default
.Pc ,
you can selectively prohibit audio/video access, here with
.Xr video 1 :
.Bd -literal -offset indent
$ abstain -v audio,video video
\&...
Abort trap (core dumped)
.Ed
.Pp
Use
.Fl e
so that the program will receive
.Dv ENOSYS
instead of
.Dv SIGABRT:
.Bd -literal -offset indent
$ abstain -ev audio,video video
\&...
video: VIDIOC_QUERYCAP: Function not implemented
video: ioctl STREAMOFF: Function not implemented
.Ed
.Pp
Using
.Nm
with a program that already calls
.Xr pledge 2
returns an error:
.Bd -literal -offset indent
$ abstain -v cpath touch /tmp/test
\&...
touch: pledge: Operation not permitted
$ file /tmp/test
/tmp/test: cannot stat '/tmp/test' (No such file or directory)
.Ed
.Pp
It's the program's responsibility to handle
.Xr pledge 2
errors.
.Sh EXIT STATUS
As
.Nm
calls
.Xr execvp 3 ,
it has no process to return to. If any error occurs prior to or when calling
.Xr execvp 3 ,
.Nm
will return -1.
.Sh SEE ALSO
.Xr pledge 2
.Xr execvp 3
.Xr unveilro 1
.Sh AUTHORS
.An -nosplit
.An Thomas Frohwein Aq Mt thfr@openbsd.org
.Sh CAVEATS
Avoid relying on
.Nm
to restrain your programs. The use of
.Xr pledge 2
modification inside the program source is a superior option wherever feasible. The intended use cases are investigation of external program behavior as part of a development process to add more robust restriction with
.Xr pledge 2 ,
or educational to understand the breadth of syscall use.
.Pp
The usefulness for programs that already use
.Xr pledge 2
is very limited. At best, earlier uses of
.Xr pledge 2
can be identified. If
.Nm
removes promises that the program uses, this will lead to an error. Depending on the program's error handling, this could cause an inconsistent state or potentially a failure to invoke a reduction in other
.Xr pledge 2
promises.
.Pp
Some system calls when allowed still have restrictions applied to them. Refer to
.Xr pledge 2
for details.
.Pp
Programs violating their
.Xr pledge 2
restrictions by invoking syscalls from one of the
.Ar vices
are killed with uncatchable
.Dv SIGABRT .
.Pp
When running with
.Fl e ,
the
.Sq error
.Em promise
comes with risk that the program can enter inconsistent state, especially
.Xr setuid 2
or
.Xr setgid 2
programs.
